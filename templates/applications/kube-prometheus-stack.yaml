{{ if .Values.applications.prometheus.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: {{ .Values.applications.argocd.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.applications.prometheus.wave | quote }}
  labels:
    {{- include "app-of-apps.labels" . | nindent 4 }}
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: {{ .Values.applications.prometheus.namespace }}
  project: {{ .Values.project.name }}
  source:
    path: k12s/charts/kube-prometheus-stack-{{ .Values.applications.prometheus.revision }}
    repoURL: https://github.com/generic-infrastructure/terragrunt-devops
    helm:
      valuesObject:
        alertmanager:
          alertmanagerSpec:
            logLevel: {{ .Values.logs.level }}
            logFormat: {{ .Values.logs.format }}
        grafana:
          grafana.ini:
            log:
              mode: console
            log.console:
              level: {{ .Values.logs.level }}
              format: {{ .Values.logs.format }}
          additionalDataSources:
            # tempo
            - name: Tempo
              type: tempo
              uid: tempo
              access: proxy
              url: http://tempo-distributed-query-frontend.tempo.svc.cluster.local:3100/
              basicAuth: false
              isDefault: false
              editable: false
              version: 1
              apiVersion: 1
              jsonData:
                httpMethod: GET
                serviceMap:
                  datasourceUid: prometheus
            # loki
            - name: Loki
              type: loki
              uid: loki
              access: proxy
              url: http://loki-distributed-query-frontend.loki.svc.cluster.local:3100/
              basicAuth: false
              isDefault: false
              editable: false
              version: 1
              apiVersion: 1
        prometheusOperator:
          logLevel: {{ .Values.logs.level }}
          logFormat: {{ .Values.logs.format }}
          podLabels:
            app.kubernetes.io/name: prometheus-operator
          ## Admission webhook support for PrometheusRules
          admissionWebhooks:
            certManager:
              enabled: true
              issuerRef:
                {{ if eq .Values.network.issuer "selfsigned" }}
                name: istio-ca
                kind: ClusterIssuer
                group: cert-manager.io
                {{ end }}
        prometheus:
          prometheusSpec:
            logLevel: {{ .Values.logs.level }}
            logFormat: {{ .Values.logs.format }}
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            additionalScrapeConfigs:
              - job_name: 'kubernetes-pods'
                honor_labels: true
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                    action: drop
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                    action: replace
                    regex: (https?)
                    target_label: __scheme__
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                    replacement: __param_$1
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: pod
                  - source_labels: [__meta_kubernetes_pod_phase]
                    regex: Pending|Succeeded|Failed|Completed
                    action: drop
        kube-state-metrics:
          metricLabelsAllowlist:
            - pods=[*]
            - deployments=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance]
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    managedNamespaceMetadata:
      labels:
        istio-injection: enabled
  ignoreDifferences:
    # fixes reconciliation loop
    - group: "*"
      kind: "*"
      managedFieldsManagers:
        - kube-webhook-certgen
{{ end }}
